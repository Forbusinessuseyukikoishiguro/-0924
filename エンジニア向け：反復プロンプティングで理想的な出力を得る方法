# エンジニア向け：反復プロンプティングで理想的な出力を得る方法

## はじめに：なぜ反復が重要なのか

プロンプティングフレームワークに従っても、時には期待した出力が得られないことがあります。そこで重要になるのが**反復（Iteration）**です。

反復によって：
- プロンプトを明確化・洗練できる
- AIツールをより良い方向へ導ける
- クリエイティブの壁を越えて新たな解決策を発見できる
- よりシャープで実用的な出力を得られる

**重要なポイント**：同じチャット内で反復することで、AIツールは前回のプロンプトの情報を参照し、その知識を蓄積できます。

---

## 4つの反復手法

### 1. プロンプティングフレームワークの再確認

最初のプロンプトが不十分だった場合、**Task（タスク）**、**Context（コンテキスト）**、**Reference（リファレンス）**の要素を強化します。

#### 例：API設計の相談

**初回プロンプト（不十分）：**
```
REST APIの設計について教えて
```

**改善後プロンプト：**
```
あなたは10年以上の経験を持つバックエンドアーキテクトです。

## Context
- ECサイトの商品管理システムを構築中
- マイクロサービスアーキテクチャを採用
- チーム規模：5名のエンジニア
- 月間アクティブユーザー：100万人規模

## Task
スケーラブルで保守性の高いREST API設計について、
以下の形式で具体的なガイドラインを提示してください：

### 求める出力形式
1. **設計原則**（5項目程度）
2. **URL設計パターン**（具体例付き）
3. **HTTPステータスコードの使い分け**
4. **エラーハンドリング戦略**
5. **バージョニング戦略**

## References
参考にしたい既存API：
- GitHub API v4
- Stripe API
- Shopify Admin API
```

### 2. プロンプトの分割

複雑なタスクを段階的に分解し、各ステップを別々のプロンプトで処理します。

#### 例：パフォーマンス最適化のコンサルティング

**プロンプト1：現状分析**
```
## Context
Reactアプリケーションのパフォーマンスが低下しています。
- 初期読み込み時間：8秒
- First Contentful Paint：3秒
- Largest Contentful Paint：6秒

以下のパフォーマンス指標について、**問題の可能性がある原因**を
箇条書きでリストアップしてください：

### 分析対象
- **初期読み込み時間**
- **レンダリングパフォーマンス**
- **メモリ使用量**
```

**プロンプト2：解決策の深掘り**
```
前回挙げていただいた原因の中から、**最も影響度の高い上位3つ**について、
具体的な解決策を以下の形式で提案してください：

### 各解決策について
1. **実装難易度**（1-5段階）
2. **期待効果**（数値目標）
3. **実装手順**（ステップバイステップ）
4. **必要なツール・ライブラリ**
5. **検証方法**
```

**プロンプト3：実装計画**
```
提案いただいた解決策を基に、**2週間のスプリント計画**を作成してください。

### 要件
- チーム構成：フロントエンドエンジニア3名
- 制約：既存機能に影響を与えない
- 優先度：ユーザー体験への影響度順

### 出力形式
- **Week 1**：実装項目とアサイン
- **Week 2**：実装項目とアサイン
- **検証・測定計画**
- **リスク対策**
```

### 3. 言い回しの変更・類似タスクへの切り替え

同じ目標を異なる角度や表現で表現し直します。

#### 例：セキュリティレビューの依頼

**オリジナル（技術的視点）：**
```
ウェブアプリケーションのセキュリティ脆弱性をチェックして
```

**視点変更（攻撃者視点）：**
```
あなたは熟練したペネトレーションテスターです。
以下のウェブアプリケーションに対して**悪意のある攻撃**を仕掛けるとしたら、
どのような脆弱性を狙いますか？

## Application Context
- Node.js + Express + MongoDB
- JWT認証
- ファイルアップロード機能あり
- 外部API連携（決済処理）

### 攻撃シナリオを考えてください
1. **認証・認可の突破**
2. **データベースへの不正アクセス**
3. **ファイルシステムへの攻撃**
4. **外部API経由の攻撃**

各シナリオについて：
- **攻撃手法**
- **成功時の影響度**
- **対策方法**
```

**視点変更（コンプライアンス視点）：**
```
あなたは情報セキュリティ監査人です。
GDPR・PCI DSS準拠の観点から、このアプリケーションが
**規制要件を満たしているか**監査してください。

## 監査項目
- **個人情報の取り扱い**
- **決済情報の保護**
- **ログ・監査証跡**
- **アクセス制御**
- **データ暗号化**

### 出力形式
各項目について：
- **現状評価**（準拠/部分準拠/非準拠）
- **具体的な問題点**
- **改善推奨事項**
- **優先度**（High/Medium/Low）
```

### 4. 制約の導入

具体的な制限を加えることで、より焦点を絞った出力を得ます。

#### 例：技術選定の相談

**制約なしのプロンプト：**
```
新規プロジェクトの技術スタックを提案して
```

**制約ありのプロンプト：**
```
## Project Constraints
- **予算**：開発費用500万円以内
- **期間**：3ヶ月でMVPリリース
- **チーム**：フルスタックエンジニア2名
- **要件**：モバイルファーストのWebアプリ
- **インフラ**：AWS使用必須
- **保守性**：メンテナンスコストを最小化

## Technical Constraints
- **既存システム**：PostgreSQL DBとの連携必須
- **パフォーマンス**：ページ読み込み2秒以内
- **セキュリティ**：OWASP Top 10対策必須
- **スケーラビリティ**：同時接続1万ユーザー対応

上記制約を満たす技術スタックを以下の形式で提案してください：

### 提案内容
1. **フロントエンド**：フレームワーク選択理由
2. **バックエンド**：言語・フレームワーク選択理由
3. **インフラ構成**：AWSサービスの組み合わせ
4. **開発ツール**：CI/CD、テスト、監視
5. **コスト見積もり**：月額運用費用
6. **リスク評価**：技術的リスクと対策
```

#### より具体的な制約例：

**コードレビューの制約：**
```
## Review Constraints
- **時間**：レビュー時間は1ファイルあたり最大10分
- **観点**：セキュリティ・パフォーマンス・可読性のみ
- **出力**：問題点は最大5個まで
- **優先度**：Critical > High > Medium の順で表示
- **形式**：各指摘にコード例と修正案を必須添付
```

**学習リソース推奨の制約：**
```
## Learning Constraints
- **対象者**：新卒エンジニア（実務経験1年未満）
- **期間**：3ヶ月で習得
- **時間**：平日2時間/日、休日4時間/日
- **予算**：書籍・コース代月額1万円以内
- **目標**：実際のプロジェクトで即戦力になる
- **形式**：週単位の学習計画として提示
```

---

## 反復の実践例：パフォーマンス最適化

### 第1回プロンプト
```
Reactアプリが重いので最適化方法を教えて
```

**出力**：一般的な最適化手法のリスト（抽象的）

### 第2回プロンプト（フレームワーク強化）
```
あなたはReactパフォーマンス最適化の専門家です。

## Context
- **アプリ規模**：100コンポーネント、50ページ
- **現在の問題**：初期読み込み8秒、ページ遷移3秒
- **技術スタック**：React 18、TypeScript、Vite
- **測定ツール**：Lighthouse、React DevTools Profiler

## Task
具体的な最適化手法を**優先度順**で提案してください。
各手法について実装難易度と期待効果も含めてください。
```

**出力**：より具体的で実装可能な提案

### 第3回プロンプト（分割アプローチ）
```
先ほど提案いただいた手法の中から「Code Splitting」について、
**実装手順を詳しく**教えてください。

## 現在の構成
- React Router v6使用
- Webpack設定はViteのデフォルト
- 約30のページコンポーネントが存在

実装手順を**段階的に**、**実際のコード例**と共に示してください。
```

**出力**：具体的な実装手順とコード例

### 第4回プロンプト（制約追加）
```
Code Splitting実装について、さらに制約を追加します：

## Additional Constraints
- **既存コードの変更**：最小限に抑える
- **実装期間**：1週間以内
- **テスト要件**：既存テストが全て通る
- **ブラウザ対応**：IE11は不要、Chrome・Safari・Firefox対応

この制約下での**最も安全で効率的な実装方法**を提案してください。
```

**出力**：制約を考慮した現実的な実装計画

---

## エンジニア向け反復のベストプラクティス

### 1. **技術的文脈の蓄積**
```markdown
## Session Context（セッション開始時に宣言）
- **現在の技術スタック**：Next.js 13、TypeScript、Prisma
- **開発環境**：Docker、GitHub Actions
- **チーム情報**：フロントエンド3名、バックエンド2名
- **プロジェクト期間**：3ヶ月MVP、6ヶ月本格運用

このコンテキストを今後のやり取りで参照してください。
```

### 2. **段階的な深掘り**
```markdown
## Progressive Deepening Pattern
1. **概要把握**：「〜について教えて」
2. **具体化**：「先ほどの〜について、より具体的に」
3. **実装詳細**：「実際のコード例を含めて」
4. **カスタマイズ**：「我々の環境に合わせて調整すると」
```

### 3. **検証とフィードバック**
```markdown
## Validation Loop
1. **提案受取**：AIからの回答を受け取る
2. **検証実行**：「この提案を検証するために〜を試しました」
3. **結果報告**：「結果は〜でした。さらに〜について相談したい」
4. **改善要求**：「〜の部分を改善するには？」
```

---

## まとめ：反復によるスキルアップ

反復プロンプティングは単なるテクニックではなく、**AIとの協働スキル**そのものです。

### 反復で身につくスキル
- **問題の分解能力**：複雑な課題を段階的に解決
- **文脈管理能力**：情報を体系的に整理・蓄積
- **検証思考**：得られた情報を批判的に評価
- **コミュニケーション能力**：意図を正確に伝達

### 継続的改善のサイクル
1. **プロンプト作成**
2. **出力評価**
3. **問題特定**
4. **手法選択**（4つの反復手法から）
5. **再実行**
6. **結果比較**

この反復プロセスを通じて、AIツールを最大限活用し、開発効率と品質の両方を向上させることができます。

**重要**：反復は失敗ではなく、より良い解決策への**プロセス**です。最初から完璧なプロンプトを作ろうとせず、段階的に改善していく姿勢が成功の鍵となります。
