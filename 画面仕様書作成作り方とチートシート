# 新人エンジニア向け：良い外部設計書（画面仕様書）の作り方

外部設計書の中でも画面仕様書は、開発チーム全体が参照する重要なドキュメントです。特に新人エンジニアにとって、読みやすく実装しやすい画面仕様書を作成することは、プロジェクトの成功に直結します。

## 画面仕様書の基本構成

良い画面仕様書には以下の要素が含まれている必要があります。

**必須項目**
- 画面レイアウト（ワイヤーフレーム）
- 画面項目の詳細定義
- 入力チェック仕様
- URLパラメータと画面表示の関係
- 条件による表示制御

**補助項目**
- 画面遷移図
- エラーハンドリング
- 非機能要件（レスポンス速度、アクセシビリティ等）

## 01-画面レイアウトの設計

画面レイアウトは開発者とデザイナー、そして最終的にユーザーをつなぐ重要な設計図です。

### ワイヤーフレームの作成ポイント

**具体的な要素配置**
抽象的な「ここにボタン」ではなく、「ログインボタン（幅120px、高さ40px、右上に配置）」のように具体的に記述します。レスポンシブ対応が必要な場合は、デスクトップ・タブレット・モバイルの各画面サイズでのレイアウトを明示することが重要です。

**情報の優先順位**
画面上で最も重要な情報やアクションを視覚的に強調し、ユーザーの視線の流れを考慮したレイアウトを心がけます。Zパターン（左上→右上→左下→右下）やFパターン（上から下へのスキャン）などの視線誘導理論を活用しましょう。

**一貫性の保持**
同じ機能のボタンは常に同じ位置に配置し、カラーやフォントサイズの使い方にルールを設けることで、ユーザビリティを向上させます。

### レイアウト記述例
```
■ユーザー登録画面
┌─────────────────────────────┐
│ ヘッダー（ロゴ + ナビゲーション）    │
├─────────────────────────────┤
│ ［ユーザー登録］                 │
│                               │
│ メールアドレス: [____________]   │
│ パスワード:     [____________]   │
│ パスワード確認: [____________]   │
│                               │
│ [ 登録する ] [ キャンセル ]      │
└─────────────────────────────┘
```

## 02-画面項目の詳細定義

各入力項目や表示項目について、開発者が実装に迷わないレベルの詳細を記述します。

### 項目定義テーブルの構成

**基本項目情報**
- 項目名（論理名・物理名）
- データ型とサイズ制限
- 必須/任意の区別
- 初期値・デフォルト値

**表示関連情報**
- 表示形式（マスク処理、桁区切り等）
- プレースホルダーテキスト
- ヘルプテキストやツールチップ

### 項目定義の記述例

| 項目名 | 物理名 | 型 | 桁数 | 必須 | 初期値 | 備考 |
|--------|--------|----|----- |----- |-------|------|
| メールアドレス | email | string | 255 | ○ | なし | RFC準拠の形式チェック |
| パスワード | password | string | 8-20 | ○ | なし | 英数記号混在、非表示入力 |
| 生年月日 | birth_date | date | - | × | なし | YYYY/MM/DD形式、カレンダー選択可 |
| 年収 | annual_income | number | 10 | × | 0 | 千円単位、カンマ区切り表示 |

## 03-入力チェック仕様

ユーザビリティとデータ品質を保つため、適切な入力チェックの設計が不可欠です。

### チェックタイミングの設計

**リアルタイムチェック**
文字入力と同時に行うチェックで、主に形式チェックに使用します。メールアドレスの@マーク有無、電話番号の桁数など、即座にフィードバックできるものが対象です。

**フィールド離脱時チェック**
入力フィールドからフォーカスが外れた時点で実行するチェックで、より複雑な形式チェックや重複チェックに適用します。

**送信前チェック**
フォーム送信ボタン押下時の最終チェックで、全項目の整合性や必須項目の入力漏れを確認します。

### チェック仕様の記述例

**メールアドレス入力チェック**
```
■チェック項目：メールアドレス
・必須チェック：未入力の場合「メールアドレスを入力してください」
・形式チェック：RFC2822準拠でない場合「正しいメールアドレスを入力してください」
・重複チェック：既存登録済みの場合「このメールアドレスは既に登録済みです」
・チェックタイミング：フィールド離脱時 + 送信前
```

**パスワード強度チェック**
```
■チェック項目：パスワード
・必須チェック：未入力の場合「パスワードを入力してください」
・桁数チェック：8文字未満「パスワードは8文字以上で入力してください」
・桁数チェック：20文字超過「パスワードは20文字以内で入力してください」
・強度チェック：英数記号が含まれない場合「英字、数字、記号を含めてください」
・チェックタイミング：リアルタイム + 送信前
```

## 04-URLパラメータと画面表示

動的な画面表示を実現するため、URLパラメータと画面要素の対応関係を明確に定義します。

### パラメータ設計の考慮点

**RESTfulな設計**
URLの構造が直感的で、リソースの階層関係が分かりやすくなるよう設計します。`/users/123/edit`のように、リソース（users）とその識別子（123）、アクション（edit）が明確に表現されているのが理想です。

**セキュリティ配慮**
機密性の高いパラメータはPOSTリクエストのボディに含めるか、適切な暗号化を施します。また、権限チェックを必ず実装し、不正なパラメータでのアクセスを防ぎます。

### パラメータ仕様の記述例

```
■URL：/products/search
■パラメータ一覧

【必須パラメータ】
・なし

【任意パラメータ】
・keyword（文字列）：検索キーワード
  - 未指定時：全商品を表示
  - 指定時：商品名・説明文に部分一致で検索
  - 例：keyword=smartphone

・category（数値）：カテゴリID
  - 未指定時：全カテゴリを対象
  - 指定時：該当カテゴリの商品のみ表示
  - 例：category=1

・sort（文字列）：ソート順
  - 未指定時：更新日時降順
  - price_asc：価格昇順
  - price_desc：価格降順
  - name_asc：商品名昇順
  - 例：sort=price_asc

・page（数値）：ページ番号
  - 未指定時：1ページ目を表示
  - 1以上の整数のみ有効
  - 例：page=2
```

## 05-条件による表示制御

ユーザーの権限や状態、データの内容によって画面表示を動的に制御する仕様を定義します。

### 表示制御の種類

**権限による制御**
ユーザーのロール（管理者、一般ユーザー、ゲスト等）に応じて、表示する情報や利用可能な機能を制限します。

**データ状態による制御**
レコードのステータス（下書き、公開、削除済み等）に応じて、表示方法や編集可能性を変更します。

**時間による制御**
期間限定のキャンペーン表示や、営業時間外の表示切り替えなど、時間軸での制御を実装します。

### 表示制御仕様の記述例

```
■商品詳細画面の表示制御

【ログイン状態による制御】
・未ログイン：「ログインして価格を確認」ボタン表示
・ログイン済み：価格と「カートに追加」ボタン表示

【ユーザー権限による制御】
・一般ユーザー：商品情報の閲覧のみ
・管理者：「編集」「削除」ボタンを追加表示

【商品ステータスによる制御】
・販売中：通常表示
・在庫切れ：「在庫切れ」バッジ表示、カートボタン無効化
・販売停止：「販売停止中」表示、価格非表示

【セール期間による制御】
・セール期間中：元価格に取り消し線、セール価格を赤字表示
・セール期間外：通常価格のみ表示
```

## 実践的なテンプレート## 新人エンジニアへのアドバイス

### レビューを積極的に受ける
画面仕様書は多くの関係者が参照するドキュメントです。作成後は必ずシニアエンジニア、デザイナー、場合によってはPMやPOからレビューを受けましょう。複数の視点からのフィードバックが、より良い仕様書作成のスキル向上につながります。

### 実装者の立場で考える
仕様書を読んで実装する開発者の立場に立って、「この記述だけで実装できるか？」を常に自問自答しながら作成することが重要です。曖昧な表現は実装時の手戻りの原因となります。

### 継続的な改善
最初から完璧な仕様書を作ることは困難です。プロジェクトの進行とともに、実装時に発生した疑問点や改善点を記録し、次回の仕様書作成に活かしていくことで、着実にスキルアップしていきましょう。


ーーーーーーーーーーーーーーー
# 画面仕様書テンプレート

## 基本情報
- **画面ID**: SCR_001
- **画面名**: ユーザー登録画面
- **作成者**: 田中太郎
- **作成日**: 2024/XX/XX
- **最終更新日**: 2024/XX/XX
- **バージョン**: 1.0

## 1. 画面概要
### 目的
新規ユーザーのアカウント作成を行う

### 対象ユーザー
未登録の一般ユーザー

### 前提条件
- インターネット接続環境
- 有効なメールアドレスを保有

## 2. 画面レイアウト

```
■デスクトップ版（1200px以上）
┌──────────────────────────────────────┐
│ ヘッダー（ロゴ + ナビゲーション）          │
├──────────────────────────────────────┤
│                                      │
│  ［新規ユーザー登録］                  │
│                                      │
│  メールアドレス *                      │
│  [_________________________]         │
│                                      │
│  パスワード *                         │
│  [_________________________]         │
│                                      │
│  パスワード確認 *                      │
│  [_________________________]         │
│                                      │
│  [ 登録する ]  [ キャンセル ]          │
│                                      │
└──────────────────────────────────────┘

■モバイル版（768px未満）
┌─────────────────┐
│ ≡ ロゴ            │
├─────────────────┤
│                 │
│ ［ユーザー登録］   │
│                 │
│ メールアドレス *   │
│ [_____________]  │
│                 │
│ パスワード *      │
│ [_____________]  │
│                 │
│ パスワード確認 *   │
│ [_____________]  │
│                 │
│ [ 登録する ]      │
│ [ キャンセル ]     │
│                 │
└─────────────────┘
```

## 3. 画面項目定義

| 項目名 | 物理名 | 型 | 桁数 | 必須 | 初期値 | プレースホルダー | 備考 |
|--------|--------|----|------|------|-------|----------------|------|
| メールアドレス | email | string | 255 | ○ | - | example@email.com | RFC準拠チェック |
| パスワード | password | string | 8-50 | ○ | - | 8文字以上で入力 | 非表示入力 |
| パスワード確認 | password_confirm | string | 8-50 | ○ | - | パスワードを再入力 | パスワードと一致必須 |

## 4. 入力チェック仕様

### メールアドレス
| チェック種別 | チェック内容 | エラーメッセージ | タイミング |
|------------|-------------|-----------------|-----------|
| 必須チェック | 未入力チェック | メールアドレスを入力してください | フォーカスアウト |
| 形式チェック | RFC2822準拠 | 正しいメールアドレスを入力してください | フォーカスアウト |
| 重複チェック | DB重複確認 | このメールアドレスは既に登録済みです | フォーカスアウト |

### パスワード
| チェック種別 | チェック内容 | エラーメッセージ | タイミング |
|------------|-------------|-----------------|-----------|
| 必須チェック | 未入力チェック | パスワードを入力してください | フォーカスアウト |
| 桁数チェック | 8文字以上 | パスワードは8文字以上で入力してください | リアルタイム |
| 桁数チェック | 50文字以下 | パスワードは50文字以内で入力してください | リアルタイム |
| 強度チェック | 英数記号含有 | 英字、数字、記号を含めてください | フォーカスアウト |

### パスワード確認
| チェック種別 | チェック内容 | エラーメッセージ | タイミング |
|------------|-------------|-----------------|-----------|
| 必須チェック | 未入力チェック | パスワード確認を入力してください | フォーカスアウト |
| 一致チェック | パスワード一致 | パスワードが一致しません | フォーカスアウト |

## 5. URLパラメータ仕様

### URL
```
/register
```

### パラメータ
| パラメータ名 | 型 | 必須 | デフォルト値 | 説明 |
|------------|----|----- |-------------|------|
| redirect_url | string | × | /dashboard | 登録完了後のリダイレクト先 |

### 例
```
/register?redirect_url=/products
→ 登録完了後に商品一覧ページへリダイレクト
```

## 6. 表示制御仕様

### アクセス制御
| 条件 | 表示内容 | 動作 |
|------|---------|------|
| 未ログイン | 通常の登録フォーム表示 | - |
| ログイン済み | 「既にログイン済みです」メッセージ表示 | 3秒後にダッシュボードへ自動遷移 |

### エラー時の制御
| 条件 | 表示内容 |
|------|---------|
| サーバーエラー | 「システムエラーが発生しました。しばらく経ってから再度お試しください。」 |
| ネットワークエラー | 「通信エラーが発生しました。インターネット接続を確認してください。」 |

## 7. 画面遷移

### 正常パターン
1. 登録ボタン押下 → バリデーションOK → 確認画面へ遷移
2. キャンセルボタン押下 → トップページへ遷移

### エラーパターン
1. バリデーションNG → 同画面でエラー表示
2. メール重複エラー → 同画面でエラー表示

## 8. 非機能要件

### レスポンス要件
- 初期表示：3秒以内
- バリデーション応答：1秒以内

### ブラウザ対応
- Chrome（最新版）
- Firefox（最新版）
- Safari（最新版）
- Edge（最新版）

### アクセシビリティ
- WCAG 2.1 AA準拠
- スクリーンリーダー対応
- キーボード操作対応

## 9. 補足事項

### セキュリティ考慮事項
- CSRF対策実装
- パスワードはハッシュ化して保存
- 入力値のサニタイゼーション実装

### 注意事項
- パスワード強度インジケーターの表示検討
- 登録完了メール送信機能との連携
- ソーシャルログイン機能との共存設計

良い画面仕様書は、開発チーム全体の生産性向上とプロダクト品質の向上に直結する重要な成果物です。上記のテンプレートを参考に、読みやすく実装しやすい仕様書の作成を心がけてください。
