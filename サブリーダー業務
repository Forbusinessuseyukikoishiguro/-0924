# サブリーダー・エンジニア向け 役割別実践ガイド

## はじめに
技術リーダーとしての5つの主要責務を効果的に遂行するための実践的なガイドです。
チームの生産性向上と品質確保を両立させるためのポイントを整理しました。

---

## 📢 1. 新規周知事項伝達

### **効果的な情報伝達の原則**

#### **📋 伝達前の準備チェックリスト**
- [ ] 情報の重要度・緊急度を分類
- [ ] 対象メンバーの絞り込み
- [ ] 伝達方法の選択（会議・メール・チャット・個別）
- [ ] 理解度確認の方法を決定

#### **🎯 重要度別伝達方法**

| 重要度 | 緊急度 | 伝達方法 | 確認方法 |
|--------|--------|----------|----------|
| 高 | 高 | 即座に口頭＋文書 | その場で質疑応答 |
| 高 | 中 | 朝会・定例会議 | 次回MTGで確認 |
| 中 | 高 | チャット＋後日詳細 | リアクション確認 |
| 中 | 中 | 週次報告・メール | 必要に応じて個別確認 |

#### **💬 効果的な伝達テンプレート**
```
【件名】[重要度]新規事項：○○について

【概要】（30秒で読める要約）
- 何が変わるのか
- いつから適用されるのか
- 誰に影響があるのか

【詳細】
- 背景・理由
- 具体的な変更内容
- 対応が必要な作業

【期限・次のアクション】
- ○月○日まで：△△を実施
- 不明点は□□まで連絡

【参考資料】
- 関連ドキュメントのリンク
```

#### **⚠️ よくある伝達ミス**
- **一方的な通知**: 理解度確認を怠る
- **情報過多**: 重要なポイントが埋もれる
- **タイミング不適切**: 忙しい時期に非緊急事項を伝達
- **フォローアップ不足**: 伝達後の進捗確認なし

---

## 🔍 2. メンバー作業のレビュー

### **効率的なレビューシステム構築**

#### **📝 レビュー対象の分類**
```
【必須レビュー】
✅ 本番環境への影響があるもの
✅ セキュリティに関わるもの
✅ 他メンバーの作業に影響するもの
✅ 新人・経験の浅いメンバーの作業

【抜き打ちレビュー】
✅ 定期的なコード品質チェック
✅ 設計書・仕様書の妥当性
✅ テスト項目の網羅性
```

#### **⏰ レビュー優先度管理**
```
【即日レビュー】（24時間以内）
- 本番リリース予定のもの
- 他メンバーの作業をブロックするもの
- セキュリティ関連

【週内レビュー】（3-5日以内）
- 通常の機能開発
- ドキュメント類
- テストケース

【定期レビュー】（週次・月次）
- コード品質の全体的な確認
- 設計・アーキテクチャの見直し
```

#### **🎯 建設的なフィードバック方法**
```
❌ ダメな例:
「このコードはよくない」
「設計が間違っている」
「テストが不十分」

✅ 良い例:
「○○の部分で例外処理を追加すると、より安全になります」
「△△のケースも考慮した設計にしてみましょう」
「□□のテストパターンも追加してください。理由は...」
```

#### **📊 レビュー記録テンプレート**
```
【レビュー記録】
日時: YYYY/MM/DD
対象: [ファイル名/作業名]
担当者: [メンバー名]

【確認項目】
□ 機能要件充足
□ 性能要件充足  
□ セキュリティ
□ エラーハンドリング
□ テスト充足度

【指摘事項】
1. [指摘内容] - 優先度: 高/中/低
2. [指摘内容] - 優先度: 高/中/低

【評価・コメント】
- 良い点:
- 改善点:
- 次回への期待:
```

---

## 🏥 3. メンバー欠員時の代替作業

### **緊急時対応プロセス**

#### **⚡ 欠員発生時の初動対応（30分以内）**
```
✅ STEP1: 影響度確認
- 担当作業の緊急度・重要度
- 他メンバーへの影響度
- お客様への影響度

✅ STEP2: 代替者選定
- 技術スキル適合度
- 現在の作業負荷
- 過去の類似作業経験

✅ STEP3: 関係者連絡
- プロジェクトマネージャーへ報告
- お客様への影響がある場合は営業連絡
- チームメンバーへの状況共有
```

#### **📋 作業引き継ぎチェックリスト**
```
【技術的引き継ぎ】
□ ソースコードの場所・構成
□ 開発環境の設定方法
□ テスト環境・データ
□ 関連ドキュメント
□ 外部連携先情報
□ 進捗状況・残作業

【業務的引き継ぎ】
□ お客様との打ち合わせ予定
□ 成果物の提出期限
□ レビュー・承認フロー
□ 関係者の連絡先
□ 過去の経緯・注意事項
```

#### **🔄 代替作業の進め方**
```
【1日目】
- 作業内容の理解・整理
- 不明点の洗い出し
- 元担当者との確認（可能であれば）

【2-3日目】
- 実作業開始
- 進捗状況の定期報告
- 問題発生時の即座エスカレーション

【1週間後】
- 引き継ぎ完了の確認
- 今後の作業計画調整
- 元担当者復帰時の再引き継ぎ準備
```

#### **⚠️ 代替作業時の注意点**
- **無理は禁物**: 技術的に困難な場合は素直に相談
- **品質優先**: 急いでもレビューは必須
- **記録重視**: 作業内容・判断理由を詳細に記録
- **定期報告**: 進捗・問題を関係者に共有

---

## 📊 4. WBS管理

### **効果的なWBS運用**

#### **📈 WBS更新サイクル**
```
【日次更新】
- 各メンバーの作業進捗率
- 完了したタスク
- 新たに発生したタスク
- 遅延リスクのあるタスク

【週次更新】
- マイルストーン達成状況
- リソース配分の調整
- リスク評価・対策状況
- 次週の重点作業

【月次更新】
- 全体スケジュールの見直し
- 品質メトリクスの評価
- メンバーのスキル成長記録
```

#### **🎯 進捗管理のポイント**
```
【定量的指標】
✅ 進捗率（%）
✅ 消化工数 vs 予定工数
✅ バグ発生数・修正数
✅ レビュー指摘件数

【定性的指標】  
✅ メンバーのモチベーション
✅ 技術的課題の解決状況
✅ お客様の満足度
✅ チーム内のコミュニケーション状況
```

#### **📋 WBS更新ミーティングテンプレート**
```
【週次WBS確認会（30分）】

1. 前週実績確認（10分）
   - 完了タスク
   - 遅延タスク・原因
   
2. 今週計画確認（15分）
   - 重点タスク
   - リスクタスク
   - リソース配分
   
3. 課題・相談事項（5分）
   - 技術的課題
   - スケジュール調整
   - サポートが必要な作業
```

#### **🚨 遅延アラート基準**
```
【即座に対応】
- 重要マイルストーンが2日以上遅延
- クリティカルパスのタスク遅延
- お客様との約束事項に影響

【1週間以内に対応】
- 個別タスクが予定の150%以上の工数
- メンバーの負荷が継続的に高い
- 品質指標の悪化

【定例で対応】
- 軽微なスケジュール調整
- リソース配分の最適化
```

---

## 🤝 5. メンバー作業サポート

### **効果的なサポート体制**

#### **👂 メンバーの相談しやすい環境づくり**
```
【定期的な1on1面談】
頻度: 週1回 × 30分
内容:
- 作業進捗・困っていること
- スキルアップの希望
- キャリアに関する相談
- チーム・プロジェクトへの要望

【オープンドア方針】
- いつでも相談可能であることを明示
- チャットでの気軽な質問を推奨
- 定期的に「何か困っていることはない？」と声掛け
```

#### **🎓 スキルアップサポート**
```
【技術スキル向上】
✅ コードレビューでの技術指導
✅ 新技術・ツールの情報共有
✅ 社内勉強会・LT会の企画
✅ 外部セミナー・研修の推奨

【業務スキル向上】
✅ 設計書作成のレクチャー
✅ お客様との打ち合わせ同席
✅ プレゼンテーション指導
✅ プロジェクト管理手法の教育
```

#### **💪 作業効率化サポート**
```
【環境整備】
- 開発環境の標準化・自動化
- 便利ツールの導入・共有
- ナレッジベースの整備

【業務改善】
- 無駄な作業の削減
- 自動化できる作業の洗い出し
- ワークフロー最適化の提案
```

#### **📞 問題解決サポートフロー**
```
【STEP1: 問題の整理】（5分）
- 何に困っているのか
- いつから困っているのか
- 自分で試した解決方法

【STEP2: 解決策の検討】（10分）
- 一緒に原因を分析
- 複数の解決案を検討
- 最適解の選択

【STEP3: 実行サポート】（継続）
- 解決策の実行支援
- 進捗の定期確認
- 必要に応じて軌道修正

【STEP4: 振り返り】（5分）
- 解決プロセスの振り返り
- 今後の予防策検討
- ナレッジの共有
```

---

## ⚖️ サブリーダーとしての心構え

### **👑 リーダーシップの基本原則**

#### **✅ やるべきこと**
- **模範となる**: 自分が求める行動を率先して実践
- **透明性を保つ**: 情報共有・意思決定プロセスを明確に
- **メンバーを信頼**: 任せるべきは任せ、成長の機会を提供
- **継続的学習**: 自分自身も技術・管理スキルを向上させ続ける

#### **❌ 避けるべきこと**
- **マイクロマネジメント**: 細かすぎる管理・指示
- **感情的な判断**: 個人的好き嫌いでの評価
- **情報の抱え込み**: 必要な情報を共有しない
- **責任転嫁**: 問題をメンバーのせいにする

### **📈 成長指標**

#### **チーム全体の成長**
```
【短期目標（1-3ヶ月）】
- メンバーの技術スキル向上
- プロジェクトの品質・生産性向上
- チーム内コミュニケーション活性化

【中期目標（3-6ヶ月）】
- メンバーの自律的な作業遂行
-新しい技術・手法の導入成功
- お客様満足度の向上

【長期目標（6ヶ月以上）】
- メンバーの昇進・昇格
- チーム全体のブランド向上
- 後進リーダーの育成成功
```

---

## 🎯 実践チェックリスト

### **週間振り返り用**
```
【今週の実績】
□ 新規周知事項の伝達は効果的だったか？
□ レビューは適切なタイミング・内容だったか？
□ メンバーサポートは十分だったか？
□ WBSは正確に更新・管理できたか？
□ 緊急時対応は適切だったか？

【改善点】
□ 来週重点的に取り組む領域は？
□ メンバーからのフィードバックは？
□ プロセス改善の余地は？

【次週の目標】
□ 優先的に取り組む課題
□ 新たに挑戦したい取り組み
□ メンバー個別の成長サポート計画
```

**サブリーダーの成功は、チーム全体の成功と成長にかかっています。**
**技術力だけでなく、人をサポートし、成長させる力を磨き続けましょう。**
