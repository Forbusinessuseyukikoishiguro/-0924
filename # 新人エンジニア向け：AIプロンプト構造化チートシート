# 新人エンジニア向け：AIプロンプト構造化チートシート

## はじめに

AIツールを効率的に活用するには、プロンプトに含める情報を**構造化**することが重要です。このチートシートでは、XMLタグとMarkdown記法を使って、AIが理解しやすい形でプロンプトを整理する方法を学べます。

---

## XMLタグによる構造化

### 基本概念
XMLタグは情報の開始と終了を明確に示すラベルとして機能します。

### 基本構文
```xml
<タグ名>
内容
</タグ名>
```

### プロンプトでよく使用するXMLタグ一覧

#### 参考例を示すタグ
```xml
<example>
具体的な例や参考となる内容
</example>

<example01>
最初の例
</example01>

<example02>
二番目の例
</example02>
```

#### コンテキスト情報を整理するタグ
```xml
<context>
背景情報や状況説明
</context>

<requirements>
必要な条件や制約
</requirements>

<goals>
達成したい目標
</goals>
```

#### データや資料を区分するタグ
```xml
<data>
分析対象のデータ
</data>

<document>
参考文書の内容
</document>

<code>
プログラムコード
</code>
```

#### 出力形式を指定するタグ
```xml
<format>
希望する出力フォーマット
</format>

<template>
使用したいテンプレート
</template>
```

### エンジニア向け実践例

#### コードレビュー依頼
```xml
あなたは経験豊富なシニアエンジニアです。

<context>
Reactコンポーネントのパフォーマンス改善を目的としたリファクタリングを行っています。
レンダリング回数を減らし、メモリ使用量を最適化したいと考えています。
</context>

<code>
import React, { useState, useEffect } from 'react';

const UserList = ({ users }) => {
  const [filteredUsers, setFilteredUsers] = useState([]);
  
  useEffect(() => {
    setFilteredUsers(users.filter(user => user.active));
  }, [users]);
  
  return (
    <div>
      {filteredUsers.map(user => (
        <div key={user.id}>{user.name}</div>
      ))}
    </div>
  );
};
</code>

<requirements>
- React 18のベストプラクティスに従う
- useMemoやuseCallbackの適切な使用
- 不要な再レンダリングの防止
</requirements>

改善点と修正後のコードを提案してください。
```

#### API設計レビュー
```xml
あなたはバックエンドアーキテクトです。

<context>
ECサイトの商品管理APIを設計しています。
RESTful APIの原則に従い、スケーラブルで保守性の高い設計を目指しています。
</context>

<current_design>
GET /api/products
POST /api/products
PUT /api/products/{id}
DELETE /api/products/{id}
GET /api/products/search?query=keyword
</current_design>

<requirements>
- RESTful設計原則の遵守
- 適切なHTTPステータスコード
- バージョニング戦略
- エラーハンドリング
</requirements>

設計の改善点と推奨するAPI仕様を提案してください。
```

---

## Markdown記法による書式設定

### 基本記法一覧

#### テキスト装飾
```markdown
**太字テキスト**
*斜体テキスト*
***太字斜体テキスト***
~~取り消し線~~
`インラインコード`
```

#### 見出し
```markdown
# 見出し1
## 見出し2
### 見出し3
#### 見出し4
```

#### リスト
```markdown
- 箇条書き項目1
- 箇条書き項目2
  - サブ項目

1. 番号付きリスト1
2. 番号付きリスト2
```

#### コードブロック
````markdown
```言語名
コードの内容
```
````

#### 表
```markdown
| 列1 | 列2 | 列3 |
|-----|-----|-----|
| 値1 | 値2 | 値3 |
| 値4 | 値5 | 値6 |
```

#### 引用
```markdown
> 引用テキスト
> 複数行の引用も可能
```

#### リンク
```markdown
[リンクテキスト](URL)
```

### エンジニア向けMarkdown活用例

#### 技術仕様書の作成依頼
```markdown
あなたは技術ライターです。

## 要求仕様
新しい**認証システム**の技術仕様書を作成してください。

### 必要な要素
- **セキュリティ要件**：OAuth 2.0準拠
- **対応認証方式**：
  1. メール/パスワード
  2. Google OAuth
  3. GitHub OAuth
- **技術スタック**：`Node.js`, `Express`, `JWT`

### 出力形式
以下の構成で作成してください：
1. **概要**
2. **アーキテクチャ図の説明**
3. **API仕様**（表形式）
4. **セキュリティ考慮事項**
5. **実装ガイドライン**

> 注意：新人エンジニアでも理解できるよう、専門用語には適切な説明を付けてください。
```

---

## 組み合わせ活用パターン

### パターン1：コードレビュー + ドキュメント生成
```xml
<task>
以下のコードの**コードレビュー**と**技術ドキュメント**の作成をお願いします。
</task>

<context>
新人エンジニアが作成したAPIエンドポイントです。
チームの**コーディング規約**に準拠しているか確認が必要です。
</context>

<code>
// ここにコード
</code>

<requirements>
### レビュー観点
- **セキュリティ**：SQLインジェクション対策
- **パフォーマンス**：N+1問題の有無
- **保守性**：コードの可読性

### ドキュメント要求
1. **API仕様書**（Markdown形式）
2. **使用例**（cURLコマンド）
3. **エラーレスポンス**の説明
</requirements>
```

### パターン2：複数例示 + 構造化出力
```xml
<examples>
<example01>
**良い例**：
```typescript
const calculateTotal = (items: Item[]): number => {
  return items.reduce((sum, item) => sum + item.price, 0);
};
```
</example01>

<example02>
**悪い例**：
```typescript
function calc(x) {
  let total = 0;
  for(let i = 0; i < x.length; i++) {
    total = total + x[i].price;
  }
  return total;
}
```
</example02>
</examples>

### 学習ポイント
上記の例を参考に、以下について説明してください：
- **関数型アプローチ** vs **命令型アプローチ**
- **TypeScript型注釈**の重要性
- **可読性**の向上方法

出力は以下の形式でお願いします：
1. **概念説明**（各200文字程度）
2. **実践的なガイドライン**（箇条書き）
3. **追加の改善例**（コードブロック付き）
```

---

## よくある間違いと対策

### XMLタグの間違い例
```xml
❌ <example>
内容
<example>  <!-- 終了タグが正しくない -->

✅ <example>
内容
</example>
```

### Markdownの間違い例
```markdown
❌ **太字テキスト *斜体も含む**  <!-- ネストが正しくない -->
✅ ***太字斜体テキスト***

❌ `コード`ブロック```  <!-- バッククォートの使い方が間違い -->
✅ `インラインコード` または
```
コードブロック
```
```

---

## 実践課題

### 初級課題
XMLタグを使って、自分が作成したコードのレビュー依頼プロンプトを作成してみてください。

### 中級課題
Markdownを活用して、技術仕様書の作成依頼プロンプトを作成してみてください。

### 上級課題
XMLタグとMarkdownを組み合わせて、複数の参考例を含む学習教材の作成依頼プロンプトを作成してみてください。

---

## まとめ

**XMLタグ**と**Markdown記法**を適切に使い分けることで、AIツールがあなたの意図を正確に理解し、より質の高いアウトプットを生成できます。

### 使い分けの指針
- **XMLタグ**：情報の分類と構造化
- **Markdown**：文書の見た目と読みやすさ

この2つを組み合わせることで、プロフェッショナルなプロンプトを作成し、開発効率を大幅に向上させることができます。
