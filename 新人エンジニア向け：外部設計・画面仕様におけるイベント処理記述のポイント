# 外部設計書：画面仕様（イベント処理）

## 基本情報
- **ID**: SCR_USER_REG_001
- **画面名称**: ユーザー登録画面
- **画面パターン**: 入力フォーム型
- **画面概要**: 新規ユーザーがアカウントを作成するための入力画面。メールアドレスとパスワードを入力し、利用規約に同意した上で登録処理を実行する。

---

## PC表示仕様

### ヘッダー部
- **高さ**: 80px
- **背景色**: #FFFFFF
- **構成要素**:
  - ロゴ（左端、140x40px）
  - ナビゲーションメニュー（中央）
  - ログインリンク（右端）

### メインコンテンツ部
- **最大幅**: 1200px（中央揃え）
- **フォーム幅**: 400px（画面中央）
- **背景**: 白色カード形式（影付き）

### フッター部
- **高さ**: 120px
- **背景色**: #F8F9FA
- **構成要素**:
  - 利用規約リンク
  - プライバシーポリシーリンク
  - お問い合わせリンク

---

## スマホ表示仕様

### ヘッダー部
- **高さ**: 60px
- **背景色**: #FFFFFF
- **構成要素**:
  - ハンバーガーメニュー（左端、24x24px）
  - ロゴ（中央、100x30px）
  - ログインアイコン（右端、24x24px）

### メインコンテンツ部
- **幅**: 画面幅の90%（最小余白 5%ずつ）
- **フォーム**: 全幅使用
- **背景**: 白色（影なし、シンプル表示）

### フッター部
- **高さ**: 80px
- **背景色**: #F8F9FA
- **構成要素**: リンクを縦並びで配置

---

## イベント処理詳細

### 1. 画面初期表示イベント
#### トリガー: ページアクセス時（URL: /register）

##### 1-1. 認証状態チェック
```
処理内容: ユーザーの現在の認証状態を確認
1. LocalStorageから認証トークンを取得
2. トークンが存在し、有効期限内の場合
   → 3秒後にダッシュボード（/dashboard）へ自動遷移
   → 遷移前に「既にログイン済みです」メッセージを表示
3. トークンが存在しないまたは無効な場合
   → 通常の登録画面を表示
```

##### 1-2. URLパラメータ解析
```
処理内容: URLクエリパラメータの解析と初期値設定
1. redirect_url パラメータの取得
   → 存在する場合: 登録後の遷移先として保存
   → 存在しない場合: デフォルト値 '/dashboard' を設定
2. email パラメータの取得
   → 存在する場合: メールアドレス入力欄に初期値として設定
   → バリデーションは実行しない（ユーザーが修正可能）
```

##### 1-3. フォーム要素初期化
```
処理内容: 入力フォームの初期状態設定
1. 全入力フィールドをクリア
2. エラーメッセージ非表示
3. 送信ボタンを有効状態に設定
4. ローディングスピナーを非表示
5. フォーカスをメールアドレス入力欄に設定
```

### 2. メールアドレス入力イベント
#### トリガー: メールアドレス入力欄（ID: email-input）への文字入力

##### 2-1. リアルタイム入力処理
```
処理内容: 文字入力と同時に実行される処理
1. 入力値を内部状態に保存
2. 全角文字が含まれている場合
   → 自動的に半角文字に変換
3. 前後の空白文字を自動削除
4. 入力文字数が255文字を超える場合
   → 255文字で切り詰める
   → 「メールアドレスは255文字以内で入力してください」を入力欄下部に表示
```

##### 2-2. フィールド離脱時バリデーション
```
トリガー: メールアドレス入力欄からフォーカスが外れた時
処理内容:
1. 必須チェック
   → 未入力の場合: 「メールアドレスを入力してください」を赤文字で表示
2. 形式チェック
   → RFC準拠の正規表現でチェック
   → 不正な場合: 「正しいメールアドレスを入力してください」を赤文字で表示
3. 重複チェック（非同期処理）
   → API(/api/v1/users/check-email)を呼び出し
   → 重複している場合: 「このメールアドレスは既に登録済みです」を赤文字で表示
   → 「ログインはこちら」リンクを併せて表示
4. エラーが無い場合
   → 入力欄の枠線を緑色に変更
   → チェックマークアイコンを入力欄右端に表示
```

### 3. パスワード入力イベント
#### トリガー: パスワード入力欄（ID: password-input）への文字入力

##### 3-1. リアルタイム強度表示
```
処理内容: パスワード入力と同時に強度を判定・表示
1. 入力値を内部状態に保存
2. パスワード強度を計算
   → 8文字未満: 「弱い」（赤色）
   → 8文字以上、英数のみ: 「普通」（黄色）
   → 8文字以上、英数記号混在: 「強い」（緑色）
3. 強度インジケーターを入力欄下部に表示
   → プログレスバー形式（0-100%）
   → カラー: 弱い=赤、普通=黄、強い=緑
4. パスワード表示/非表示切り替えボタンを入力欄右端に配置
   → アイコン: 目のマーク（表示時は斜線付き）
```

##### 3-2. 表示/非表示切り替えイベント
```
トリガー: パスワード表示切り替えボタン（ID: password-toggle）クリック
処理内容:
1. 現在の表示状態を確認
2. 非表示（type="password"）の場合
   → type="text"に変更
   → アイコンを「目に斜線」に変更
   → ボタンのaria-labelを「パスワードを非表示にする」に変更
3. 表示（type="text"）の場合
   → type="password"に変更
   → アイコンを「目」に変更
   → ボタンのaria-labelを「パスワードを表示する」に変更
4. フォーカスを入力欄の末尾に戻す
```

### 4. パスワード確認入力イベント
#### トリガー: パスワード確認入力欄（ID: password-confirm-input）への文字入力

##### 4-1. 一致チェック処理
```
処理内容: パスワードとの一致を即座にチェック
1. 入力値とパスワード入力欄の値を比較
2. 一致しない場合
   → 「パスワードが一致しません」を入力欄下部に赤文字で表示
   → 入力欄の枠線を赤色に変更
3. 一致する場合
   → エラーメッセージを非表示
   → 入力欄の枠線を緑色に変更
   → チェックマークアイコンを入力欄右端に表示
4. パスワード入力欄が変更された場合
   → 再度一致チェックを実行
```

### 5. 利用規約同意チェックボックスイベント
#### トリガー: 利用規約同意チェックボックス（ID: terms-checkbox）クリック

##### 5-1. 同意状態切り替え
```
処理内容: チェックボックスの状態変更と送信ボタン制御
1. チェックボックスの状態を取得
2. チェック済みの場合
   → 内部状態を「同意済み」に設定
   → 送信ボタンの有効/無効状態を再評価
3. 未チェックの場合
   → 内部状態を「未同意」に設定
   → 送信ボタンを無効化
   → 送信ボタンのテキストを「利用規約への同意が必要です」に変更
```

##### 5-2. 利用規約リンククリック
```
トリガー: 「利用規約」リンク（ID: terms-link）クリック
処理内容:
1. 新しいタブで利用規約ページを開く
   → URL: /terms-of-service
   → target="_blank" rel="noopener noreferrer"
2. 現在のページはそのまま維持
3. アクセシビリティ: スクリーンリーダー向けに「新しいタブで開きます」を読み上げ
```

### 6. 送信ボタンイベント
#### トリガー: 登録ボタン（ID: submit-button）クリック

##### 6-1. 送信前バリデーション
```
処理内容: フォーム送信前の最終チェック
1. 送信ボタンを無効化（多重送信防止）
2. ローディングスピナーを表示
3. 全項目のバリデーション実行
   → メールアドレス: 必須・形式・重複チェック
   → パスワード: 必須・強度チェック
   → パスワード確認: 必須・一致チェック
   → 利用規約: 同意チェック
4. エラーがある場合
   → 最初のエラー項目にフォーカス移動
   → ページトップにエラーサマリーを表示
   → 送信ボタンを有効化
   → ローディングスピナーを非表示
   → 処理終了
5. エラーが無い場合
   → 6-2の送信処理へ進む
```

##### 6-2. API送信処理
```
処理内容: サーバーへの登録データ送信
1. 送信データの構築
   {
     "email": "入力されたメールアドレス",
     "password": "入力されたパスワード",
     "redirect_url": "保存済みのリダイレクト先"
   }
2. API呼び出し実行
   → POST /api/v1/users
   → Content-Type: application/json
   → タイムアウト: 10秒
3. 成功レスポンス（HTTP 201）の場合
   → 6-3の成功処理へ進む
4. エラーレスポンス（HTTP 4xx/5xx）の場合
   → 6-4のエラー処理へ進む
5. ネットワークエラー・タイムアウトの場合
   → 6-5の通信エラー処理へ進む
```

##### 6-3. 登録成功処理
```
処理内容: API成功レスポンス受信後の処理
1. フォームを非表示にする
2. 成功メッセージを表示
   → 「ユーザー登録が完了しました！」
   → 「確認メールをお送りしました。メール内のリンクをクリックして登録を完了してください。」
3. 認証情報を保存
   → LocalStorageにJWTトークンを保存
   → ユーザー情報をSessionStorageに保存
4. 3秒後に自動遷移を実行
   → 遷移先: redirect_urlパラメータまたはデフォルト（/dashboard）
   → カウントダウンタイマーを表示「3秒後にページを移動します...」
5. 「今すぐ移動する」ボタンを表示
   → クリック時は即座に遷移実行
```

##### 6-4. サーバーエラー処理
```
処理内容: API エラーレスポンス受信後の処理
1. レスポンス内容の解析
2. バリデーションエラー（HTTP 400）の場合
   → エラー詳細を各入力欄に表示
   → フィールドレベルエラーメッセージを更新
3. メールアドレス重複エラー（HTTP 409）の場合
   → メールアドレス入力欄下部にエラー表示
   → 「このメールアドレスは既に登録済みです」
   → 「ログインはこちら」リンクを併せて表示
4. レート制限エラー（HTTP 429）の場合
   → ページ上部にエラーメッセージ表示
   → 「アクセスが集中しています。しばらく経ってから再度お試しください。」
5. その他のエラー（HTTP 5xx等）
   → 6-5の通信エラー処理を実行
6. 送信ボタンを有効化
7. ローディングスピナーを非表示
```

##### 6-5. 通信エラー処理
```
処理内容: ネットワーク障害・タイムアウト時の処理
1. ページ上部にエラーバナーを表示
   → 「通信エラーが発生しました。インターネット接続を確認して、再度お試しください。」
   → 背景色: 赤色（#FF4444）
   → アイコン: 警告マーク
2. 「再試行」ボタンを表示
   → クリック時は6-1の送信前バリデーションから再実行
3. 送信ボタンを有効化
4. ローディングスピナーを非表示
5. フォーカスを送信ボタンに移動
```

### 7. キーボードイベント
#### トリガー: 各種キーボード操作

##### 7-1. Enterキー押下処理
```
対象要素: 全ての入力フィールド
処理内容:
1. 現在フォーカス中の要素を確認
2. メールアドレス入力欄の場合
   → パスワード入力欄にフォーカス移動
3. パスワード入力欄の場合
   → パスワード確認入力欄にフォーカス移動
4. パスワード確認入力欄の場合
   → 利用規約チェックボックスにフォーカス移動
5. 利用規約チェックボックスの場合
   → 送信ボタンにフォーカス移動
6. 送信ボタンの場合
   → 送信処理を実行（6-1の処理と同様）
```

##### 7-2. Escapeキー押下処理
```
対象要素: 画面全体
処理内容:
1. 現在表示中のエラーメッセージをすべて非表示
2. フォーカスをページトップ（メールアドレス入力欄）に移動
3. ローディング中の場合は処理をキャンセル
   → 送信ボタンを有効化
   → ローディングスピナーを非表示
```

### 8. ウィンドウイベント
#### トリガー: ブラウザウィンドウの状態変化

##### 8-1. ページ離脱前警告
```
トリガー: beforeunload イベント
処理内容:
1. フォームの入力状態を確認
2. いずれかの入力欄に値が入力されている場合
   → 「入力内容が失われます。ページを離れますか？」の確認ダイアログを表示
3. 未入力または登録完了済みの場合
   → 警告を表示しない
```

##### 8-2. ウィンドウリサイズ対応
```
トリガー: window resize イベント
処理内容:
1. 画面幅を取得
2. 768px以下の場合（スマホ表示）
   → レイアウトをモバイル用に切り替え
   → フォーム幅を画面幅の90%に変更
   → ヘッダーをモバイル用レイアウトに変更
3. 769px以上の場合（PC表示）
   → レイアウトをデスクトップ用に切り替え
   → フォーム幅を固定400pxに変更
   → ヘッダーをデスクトップ用レイアウトに変更
4. デバウンス処理により、リサイズ完了後300ms後に実行
```

---

## エラーハンドリング仕様

### エラーメッセージ表示ルール
1. **表示位置**: 該当する入力要素の直下
2. **表示タイミング**: フィールド離脱時、または送信時
3. **表示スタイル**: 赤文字（#FF4444）、12pxフォント
4. **消去タイミング**: 正しい値が入力された時点で即座に消去

### エラーメッセージ一覧
| 項目 | エラー条件 | メッセージ |
|------|----------|-----------|
| メールアドレス | 未入力 | メールアドレスを入力してください |
| メールアドレス | 形式不正 | 正しいメールアドレスを入力してください |
| メールアドレス | 重複 | このメールアドレスは既に登録済みです |
| パスワード | 未入力 | パスワードを入力してください |
| パスワード | 8文字未満 | パスワードは8文字以上で入力してください |
| パスワード | 弱い | 英字、数字、記号を含めてください |
| パスワード確認 | 未入力 | パスワード確認を入力してください |
| パスワード確認 | 不一致 | パスワードが一致しません |
| 利用規約 | 未同意 | 利用規約への同意が必要です |

---

## アクセシビリティ対応

### ARIA属性の設定
```html
<!-- メールアドレス入力欄 -->
<input 
  type="email" 
  id="email-input"
  aria-label="メールアドレス"
  aria-describedby="email-error email-help"
  aria-required="true"
>

<!-- エラーメッセージ -->
<div 
  id="email-error" 
  role="alert" 
  aria-live="polite"
>
  エラーメッセージ
</div>
```

### キーボードナビゲーション
- Tab順序: メールアドレス → パスワード → パスワード確認 → 利用規約 → 送信ボタン
- フォーカス表示: 青色の枠線（2px solid #0066CC）で明確に表示
- スキップリンク: 「メインコンテンツにスキップ」リンクをページ先頭に配置

### スクリーンリーダー対応
- form要素にaria-labelを設定: 「ユーザー登録フォーム」
- エラーメッセージはaria-liveで自動読み上げ
- ローディング状態の音声通知: 「処理中です。しばらくお待ちください。」

---

## レスポンシブ対応詳細

### ブレークポイント
- デスクトップ: 1024px以上
- タブレット: 768px〜1023px
- モバイル: 767px以下

### 各デバイスでの表示調整
| 要素 | デスクトップ | タブレット | モバイル |
|------|------------|----------|---------|
| フォーム幅 | 400px固定 | 600px固定 | 画面幅の90% |
| 入力欄高さ | 48px | 48px | 56px（タッチしやすく） |
| ボタン高さ | 48px | 48px | 56px |
| 余白 | 24px | 20px | 16px |
| フォントサイズ | 14px | 14px | 16px（読みやすく） |

---

## パフォーマンス要件

### 応答速度目標
- 画面初期表示: 2秒以内
- フィールドバリデーション: 100ms以内
- API通信: 5秒以内
- ページ遷移: 1秒以内

### 最適化方針
1. **画像最適化**: WebP形式、適切なサイズ
2. **JavaScript最適化**: 必要な処理のみ読み込み
3. **CSS最適化**: 未使用スタイルの削除
4. **API呼び出し最適化**: 適切なデバウンス処理
